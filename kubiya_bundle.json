{
  "tools": [
    {
      "name": "say_hello",
      "source": null,
      "alias": null,
      "description": "Prints hello {name}!",
      "type": "docker",
      "content": "\npip install argparse > /dev/null 2>&1\npip install requests > /dev/null 2>&1\npython /tmp/main.py \"{{ .name }}\"\n",
      "content_url": null,
      "args": [
        {
          "name": "name",
          "type": null,
          "description": "name to say hello to",
          "required": true,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [
        {
          "source": null,
          "destination": "/tmp/main.py",
          "content": "import argparse\nimport requests\n\n\ndef hello_world(name: str):\n    print(f\"Hello, {name}!\")\n\n\ndef query_prometheus(prometheus_url, query, timeout='30s'):\n    \"\"\"\n    Queries Prometheus for a given metric.\n\n    Parameters:\n    - prometheus_url (str): Base URL of Prometheus server (e.g., 'http://localhost:9090')\n    - query (str): PromQL query to send to Prometheus\n    - timeout (str): Query timeout, e.g., '30s' (default is '30s')\n\n    Returns:\n    - JSON response from Prometheus with the query results\n    \"\"\"\n    url = f\"{prometheus_url}/api/v1/query\"\n    params = {'query': query, 'timeout': timeout}\n\n    try:\n        response = requests.get(url, params=params)\n        response.raise_for_status()  # Raise an error for failed requests\n        data = response.json()\n        if data['status'] == 'success':\n            return data['data']['result']\n        else:\n            raise Exception(f\"Query failed with status: {data['status']}\")\n    except requests.exceptions.RequestException as e:\n        print(f\"An error occurred: {e}\")\n        return None\n\n\nif __name__ == \"__main__\":\n    # Get env vars\n    prometheus_url = 'http://prometheus-server.prometheus-system'\n    query = 'up{job=\"prometheus\"}'\n\n    prometheus_query_results = query_prometheus(prometheus_url, query)\n    print(\"Prometheus query results:\", prometheus_query_results)\n\n"
        }
      ],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "python:3.12",
      "long_running": false,
      "on_start": null,
      "on_build": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"say_hello\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"name (Required)<br/>name to say hello to\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>pip install argparse > /dev/null 2>&1<br/>pip install...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: python:3.12\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "query_prometheus",
      "source": null,
      "alias": null,
      "description": "Query Prometheus",
      "type": "docker",
      "content": "\npython /tmp/main.py\n",
      "content_url": null,
      "args": [],
      "env": [],
      "secrets": [],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [
        {
          "source": null,
          "destination": "/tmp/main.py",
          "content": "import argparse\nimport requests\n\n\ndef hello_world(name: str):\n    print(f\"Hello, {name}!\")\n\n\ndef query_prometheus(prometheus_url, query, timeout='30s'):\n    \"\"\"\n    Queries Prometheus for a given metric.\n\n    Parameters:\n    - prometheus_url (str): Base URL of Prometheus server (e.g., 'http://localhost:9090')\n    - query (str): PromQL query to send to Prometheus\n    - timeout (str): Query timeout, e.g., '30s' (default is '30s')\n\n    Returns:\n    - JSON response from Prometheus with the query results\n    \"\"\"\n    url = f\"{prometheus_url}/api/v1/query\"\n    params = {'query': query, 'timeout': timeout}\n\n    try:\n        response = requests.get(url, params=params)\n        response.raise_for_status()  # Raise an error for failed requests\n        data = response.json()\n        if data['status'] == 'success':\n            return data['data']['result']\n        else:\n            raise Exception(f\"Query failed with status: {data['status']}\")\n    except requests.exceptions.RequestException as e:\n        print(f\"An error occurred: {e}\")\n        return None\n\n\nif __name__ == \"__main__\":\n    # Get env vars\n    prometheus_url = 'http://prometheus-server.prometheus-system'\n    query = 'up{job=\"prometheus\"}'\n\n    prometheus_query_results = query_prometheus(prometheus_url, query)\n    print(\"Prometheus query results:\", prometheus_query_results)\n\n"
        }
      ],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "python:3.11",
      "long_running": false,
      "on_start": null,
      "on_build": "\npip install argparse > /dev/null 2>&1\npip install requests > /dev/null 2>&1\npython /tmp/main.py\n",
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"query_prometheus\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>python /tmp/main.py<br/>...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: python:3.11\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    }
  ],
  "errors": [],
  "python_bundle_version": "3.11.10"
}